/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

/*
 * Copyright (c) 2015, Joyent, Inc.
 */
var assert = require('assert-plus');

var UUID_RE =
/^([a-f0-9]{8})-([a-f0-9]{4})-([a-f0-9]{4})-([a-f0-9]{4})-([a-f0-9]{12})$/;

var MAX_VALUES_LOOKUP = {
    4: 'ffff',
    8: 'ffffffff',
    12: 'ffffffffffff'
};

var MIN_VALUES_LOOKUP = {
    4: '0000',
    8: '00000000',
    12: '000000000000'
};

/*
 * Validates if a string is a UUID
 */
exports.validUUID = function validUUID(uuid) {
    return UUID_RE.test(uuid);
};

/*
 * Takes a string "uuid" that represents a uuid generated by
 * libuuid and returns a string that represents that uuid incremented
 * by one. For instance, the following call:
 *
 * incrementUUID(1b4e28ba-2fa1-11d2-883f-b9a761bde3fb)
 *
 * would return:
 *
 * 1b4e28ba-2fa1-11d2-883f-b9a761bde3fc
 */
exports.incrementUUID = function incrementUUID(uuid) {
    // Turn the uuid into an array of hex values
    var uuidParts = uuid.match(UUID_RE).slice(1);
    assert.equal(uuidParts.length, 5, 'uuid must be a valid uuid: ' + uuid);

    var MAX_UUID_VALUE = 'ffffffff-ffff-ffff-ffff-ffffffffffff';
    if (uuid === MAX_UUID_VALUE)
        return uuid;

    var value, nextValue, nextStringValue;

    // Reverse the uuid string to increment the least significant bits
    // first
    uuidParts.reverse();

    uuidParts.some(function eachUUIDpart(uuidPart, index) {

        // This part of the uuid is already the max value,
        // move on to the next part of the uuid to see
        // if it can be incremented
        if (uuidPart === MAX_VALUES_LOOKUP[uuidPart.length]) {
            uuidParts[index] = MIN_VALUES_LOOKUP[uuidPart.length];
            return false;
        }

        // This part of the uuid is not already the maximum
        // value, it can be incremented
        value = (+('0x' + uuidPart));
        assert.number(value);
        nextValue = value + 1;

        // Make sure to left pad with enough '0'
        nextStringValue = nextValue.toString(16);
        uuidParts[index] = (MIN_VALUES_LOOKUP[uuidPart.length] +
            nextStringValue).substr(nextStringValue.length);

        // We're done
        return true;
    });

    // Reverse the uuid string back to revert the previous reverse() done
    // at the beginning
    uuidParts.reverse();

    return uuidParts.join('-');
};

/*
 * Takes a string "uuid" that represents a uuid generated by
 * libuuid and returns a string that represents that uuid decremented
 * by one. For instance, the following call:
 *
 * decrementUUID(1b4e28ba-2fa1-11d2-883f-b9a761bde3fb)
 *
 * would return:
 *
 * 1b4e28ba-2fa1-11d2-883f-b9a761bde3fa
 */
exports.decrementUUID = function decrementUUID(uuid) {
    // Turn the uuid into an array of hex values
    var uuidParts = uuid.match(UUID_RE).slice(1);
    assert.equal(uuidParts.length, 5, 'uuid must be a valid uuid: ' + uuid);

    var MIN_UUID_VALUE = '00000000-0000-0000-0000-000000000000';
    if (uuid === MIN_UUID_VALUE)
        return uuid;

    var value, nextValue, nextStringValue;

    // Reverse the uuid string to decrement the least significant bits
    // first
    uuidParts.reverse();

    uuidParts.some(function eachUUIDpart(uuidPart, index) {
        // This part of the uuid is already the minimum value,
        // move on to the next part of the uuid to see
        // if it can be decremented
        if (uuidPart === MIN_VALUES_LOOKUP[uuidPart.length]) {
            uuidParts[index] = MAX_VALUES_LOOKUP[uuidPart.length];
            return false;
        }

        // This part of the uuid is not already the minimum value,
        // so it can be decremented
        value = (+('0x' + uuidPart));
        assert.number(value);
        nextValue = value - 1;

        // Make sure to left pad with enough '0'
        nextStringValue = nextValue.toString(16);
        uuidParts[index] = (MIN_VALUES_LOOKUP[uuidPart.length] +
            nextStringValue).substr(nextStringValue.length);

        // We're done
        return true;
    });

    // Reverse the uuid string back to revert the previous reverse() done
    // at the beginning
    uuidParts.reverse();

    return uuidParts.join('-');
};
